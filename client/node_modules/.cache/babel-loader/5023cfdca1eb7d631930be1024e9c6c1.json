{"ast":null,"code":"// import React, { Component } from 'react';\n// import { Button, ButtonGroup, Container, Table } from 'reactstrap';\n// import AppNavbar from './AppNavbar';\n// import { Link } from 'react-router-dom';\n// import InfiniteScroll from \"react-infinite-scroller\";\n// import axios from 'axios';\n// class PromotionList extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = { promScroll: [], promotions: [], isLoading: true, column: [], items: 5, hasMoreItems: true, length: 0 };\n//     this.remove = this.remove.bind(this);\n//   }\n//   componentDidMount() {\n//     this.setState({ isLoading: true });\n//     //////////\n//     fetch('api/schema')\n//       .then(response => response.json())\n//       .then(schema => this.setState({ promotionCoulmn: schema, isLoading: false }));\n//     // fetch('api/promotions')\n//     //   .then(response => response.json())\n//     //   .then(data => this.setState({ promotions: data, isLoading: false }));\n//   }\n//   // async getScroll(ite) {\n//   //   fetch(`api/promotions/${ite}`)\n//   //     .then(response => response.json())\n//   //     .then(data =>{ this.setState({ x: data, isLoading: false })});\n//   // }\n//   async duplicate(id) {\n//   }\n//   async remove(id) {\n//     await fetch(`/api/promotion/${id}`, {\n//       method: 'DELETE',\n//       headers: {\n//         'Accept': 'application/json',\n//         'Content-Type': 'application/json'\n//       }\n//     }).then(() => {\n//       console.log(\"Remove Done!\");\n//       let updatedPromotions = [...this.state.promotions].filter(i => i._id !== id);\n//       this.setState({ promotions: updatedPromotions });\n//     });\n//   }\n//   // showItems(){\n//   //   const length = this.state.length;\n//   //   // const items = this.state.items;\n//   //   const hasMoreItems = this.state.hasMoreItems;\n//   //   // if (ite < 25) {\n//   //   // this.getScroll(ite);\n//   //   // debugger;\n//   //   console.log(\"length\", length);\n//   //   console.log(\"items\",  this.state.items);\n//   //   var items = [];\n//   //   fetch(`api/promotions/${length}`)\n//   //     .then(response => response.json())\n//   //     .then(data => this.setState({ promScroll: data, isLoading: false }))\n//   //   const { promScroll } = this.state;\n//   //   console.log(\"promScroll\", promScroll);\n//   //   for (const i = 0; i < this.state.items; i++) {\n//   //     items.push(\n//   //       <tr key=\"promScroll[i]._id\">{\n//   //                 Object.values(promScroll[i]).map(value =>\n//   //                   <td>{promScroll[i]._id != value ? value : ''}</td>\n//   //                 )}<td>\n//   //                   <ButtonGroup>\n//   //                     <Button size=\"sm\" color=\"primary\" tag={Link} to={\"/promotions/\" + promScroll[i]._id}>Edit</Button>\n//   //                     {/* <Button size=\"sm\" color=\"\" tag={Link} to={\"/promotions/\" + item._id}>Duplicate  </Button> */}\n//   //                     <Button size=\"sm\" color=\"\" onClick={() => this.duplicate(promScroll[i]._id)}>Duplicate</Button>\n//   //                     <Button size=\"sm\" color=\"danger\" onClick={() => this.remove(promScroll[i]._id)}>Delete</Button>\n//   //                   </ButtonGroup>\n//   //                 </td>\n//   //               </tr>\n//   //     );\n//   //     console.log(i);\n//   //   }\n//   //   return items;\n//   // }\n//   showItems() {\n//     const length = this.state.length;\n//       const ite = this.state.items;\n//       const hasMoreItems = this.state.hasMoreItems;\n//       // if (ite < 25) {\n//       // this.getScroll(ite);\n//     //  debugger;\n//     if (hasMoreItems) {\n//       fetch(`api/promotions/${ite}`)\n//         .then(response => { \n//           // debugger;\n//           return  response.json()})\n//         .then(data => this.setState({ promotions: data, isLoading: false }));\n//       // }\n//       const { promotions } = this.state;\n//       console.log(\"ppppp\", promotions);\n//       var items = [];\n//       promotions.map(item => (\n//         items.push(\n//           <tr key={item._id}>{\n//             Object.values(item).map(value =>\n//               <td>{item._id != value ? value : ''}</td>\n//             )}<td>\n//               <ButtonGroup>\n//                 <Button size=\"sm\" color=\"primary\" tag={Link} to={\"/promotions/\" + item._id}>Edit</Button>\n//                 {/* <Button size=\"sm\" color=\"\" tag={Link} to={\"/promotions/\" + item._id}>Duplicate  </Button> */}\n//                 <Button size=\"sm\" color=\"\" onClick={() => this.duplicate(item._id)}>Duplicate</Button>\n//                 <Button size=\"sm\" color=\"danger\" onClick={() => this.remove(item._id)}>Delete</Button>\n//               </ButtonGroup>\n//             </td>\n//           </tr>\n//         )\n//       ))\n//       return items;\n//     }\n//   }\n//   loadMore() {\n//     if (document.documentElement.scrollTop === document.documentElement.offsetHeight) {\n//       this.setState({ hasMoreItems: false});\n//     } else {\n//         // debugger;\n//         if (this.state.items < 45) {\n//           this.setState({ items: this.state.items + 5 });\n//           console.log(\"stateitems\", this.state.items);\n//         }\n//     }\n//   }\n//   render() {\n//     const { promotionCoulmn, promotions, isLoading } = this.state;\n//     console.log(\"promotions\", promotions);\n//     promotions.forEach(item =>\n//       console.log(Object.keys(item))\n//     )\n//     if (isLoading) {\n//       return <p>Loading...</p>;\n//     }\n//     console.log(\"promotionCoulmn\", promotionCoulmn);\n//     console.log(\"promotions\", promotions);\n//     const promotionList = promotions.map(item => (\n//       <tr key=\"item._id\">{\n//         Object.values(item).map(value =>\n//           <td>{item._id != value ? value : ''}</td>\n//         )}<td>\n//           <ButtonGroup>\n//             <Button size=\"sm\" color=\"primary\" tag={Link} to={\"/promotions/\" + item._id}>Edit</Button>\n//             {/* <Button size=\"sm\" color=\"\" tag={Link} to={\"/promotions/\" + item._id}>Duplicate  </Button> */}\n//             <Button size=\"sm\" color=\"\" onClick={() => this.duplicate(item._id)}>Duplicate</Button>\n//             <Button size=\"sm\" color=\"danger\" onClick={() => this.remove(item._id)}>Delete</Button>\n//           </ButtonGroup>\n//         </td></tr>\n//     ))\n//     // const promColumn=promotionColumns.map(column=>\n//     //   // <th>{column.fieldName}</th>\n//     //  console.log(\"field\",column)\n//     // )\n//     // const promColumn = promotionCoulmn.map(c => (\n//     //   <th>{Object.values(c)[1]}</th>\n//     //   // Object.values(c).map(cc =>\n//     //   //   <th>{cc.fieldName}</th>,\n//     //   //   // console.log(\"c\", cc),\n//     //   // )\n//     // ))\n//     const promotionColumns = [];\n//     const k = [];\n//     promotions.map(item => (\n//       k.push(Object.keys(item)),\n//       console.log(\"items\", k)\n//     )\n//     )\n//     k.map((item) => (\n//       console.log(item),\n//       item.map(a => {\n//         if (!promotionColumns.some(val => val === a)) {\n//           promotionColumns.push(a);\n//           console.log(\"em\", a);\n//         }\n//       })\n//     )\n//     )\n//     console.log(\"promotionC\", promotionColumns);\n//     const p = promotionColumns.map(coulmn =>\n//       <th>{'_id' != coulmn ? coulmn : ''}</th>\n//     )\n//     console.log(\"p\", promotionColumns);\n//     return (\n//       <div>\n//         <AppNavbar />\n//         <Container fluid>\n//           <div className=\"float-right\">\n//             <Button color=\"success\" tag={Link} to=\"/promotions/new\">Add Promotion</Button>\n//           </div>\n//           <h3>Promotion List</h3>\n//           <Table className=\"mt-4\">\n//             <thead>\n//               <div style={{ height: '500px', overflow: 'auto' }}>\n//                 <InfiniteScroll\n//                   loadMore={this.loadMore.bind(this)}\n//                   hasMore={this.state.hasMoreItems}\n//                   loader={<div className=\"loader\"> Loading... </div>}\n//                   useWindow={false}>\n//                   <tr>{p}</tr>\n//                   {this.showItems()}{\" \"}\n//                 </InfiniteScroll>{\" \"}\n//               </div>{\" \"}\n//             </thead>\n//             <tbody> </tbody>  </Table>\n//         </Container>\n//       </div>\n//     );\n//   }\n// }\n// export default PromotionList;\n////////////////////////////\n// import React, { Component } from 'react';\n// import { Button, ButtonGroup, Container, Table } from 'reactstrap';\n// import AppNavbar from './AppNavbar';\n// import { Link } from 'react-router-dom';\n// class PromotionList extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = { promotions: [], isLoading: true, column: [] };\n//     this.remove = this.remove.bind(this);\n//   }\n//   componentDidMount() {\n//     this.setState({ isLoading: true });\n//     //////////\n//     fetch('api/schema')\n//       .then(response => response.json())\n//       .then(schema => this.setState({ promotionCoulmn: schema, isLoading: false }));\n//     fetch('api/promotions')\n//       .then(response => response.json())\n//       .then(data => this.setState({ promotions: data, isLoading: false }));\n//   }\n//   async duplicate(id) {\n//   }\n//   async remove(id) {\n//     await fetch(`/api/promotion/${id}`, {\n//       method: 'DELETE',\n//       headers: {\n//         'Accept': 'application/json',\n//         'Content-Type': 'application/json'\n//       }\n//     }).then(() => {\n//       console.log(\"Remove Done!\");\n//       let updatedPromotions = [...this.state.promotions].filter(i => i._id !== id);\n//       this.setState({ promotions: updatedPromotions });\n//     });\n//   }\n//   render() {\n//     const { promotionCoulmn, promotions, isLoading } = this.state;\n//     console.log(\"promotions\", promotions);\n//     promotions.forEach(item =>\n//       console.log(Object.keys(item))\n//     )\n//     if (isLoading) {\n//       return <p>Loading...</p>;\n//     }\n//     console.log(\"promotionCoulmn\", promotionCoulmn);\n//     console.log(\"promotions\", promotions);\n//     const promotionList = promotions.map(item => (\n//       <tr key=\"item._id\">{\n//         Object.values(item).map(value =>\n//           <td>{item._id != value ? value : ''}</td>\n//         )}<td>\n//           <ButtonGroup>\n//             <Button size=\"sm\" color=\"primary\" tag={Link} to={\"/promotions/\" + item._id}>Edit</Button>\n//             {/* <Button size=\"sm\" color=\"\" tag={Link} to={\"/promotions/\" + item._id}>Duplicate  </Button> */}\n//             <Button size=\"sm\" color=\"\" onClick={() => this.duplicate(item._id)}>Duplicate</Button>\n//             <Button size=\"sm\" color=\"danger\" onClick={() => this.remove(item._id)}>Delete</Button>\n//           </ButtonGroup>\n//         </td></tr>\n//     ))\n//     // const promColumn=promotionColumns.map(column=>\n//     //   // <th>{column.fieldName}</th>\n//     //  console.log(\"field\",column)\n//     // )\n//     // const promColumn = promotionCoulmn.map(c => (\n//     //   <th>{Object.values(c)[1]}</th>\n//     //   // Object.values(c).map(cc =>\n//     //   //   <th>{cc.fieldName}</th>,\n//     //   //   // console.log(\"c\", cc),\n//     //   // )\n//     // ))\n//     const promotionColumns = [];\n//     const k = [];\n//     promotions.map(item => (\n//       k.push(Object.keys(item)),\n//       console.log(\"items\", k)\n//     )\n//     )\n//     k.map((item) => (\n//       console.log(item),\n//       item.map(a => {\n//         if (!promotionColumns.some(val => val === a)) {\n//           promotionColumns.push(a);\n//           console.log(\"em\", a);\n//         }\n//       })\n//     )\n//     )\n//     console.log(\"promotionC\", promotionColumns);\n//     const p = promotionColumns.map(coulmn =>\n//       <th>{'_id' != coulmn ? coulmn : ''}</th>\n//     )\n//     console.log(\"p\", promotionColumns);\n//     return (\n//       <div>\n//         <AppNavbar />\n//         <Container fluid>\n//           <div className=\"float-right\">\n//             <Button color=\"success\" tag={Link} to=\"/promotions/new\">Add Promotion</Button>\n//           </div>\n//           <h3>Promotion List</h3>\n//           <Table className=\"mt-4\">\n//             <thead>\n//               <tr>{p}</tr>\n//               {/* <tr>{promColumn}</tr>  */}\n//             </thead>\n//             <tbody>\n//               {promotionList}\n//             </tbody>\n//           </Table>\n//         </Container>\n//       </div>\n//     );\n//   }\n// }\n// export default PromotionList;","map":{"version":3,"sources":["C:/project/client/src/PromotionList.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React, { Component } from 'react';\r\n// import { Button, ButtonGroup, Container, Table } from 'reactstrap';\r\n// import AppNavbar from './AppNavbar';\r\n// import { Link } from 'react-router-dom';\r\n// import InfiniteScroll from \"react-infinite-scroller\";\r\n// import axios from 'axios';\r\n\r\n// class PromotionList extends Component {\r\n\r\n//   constructor(props) {\r\n//     super(props);\r\n//     this.state = { promScroll: [], promotions: [], isLoading: true, column: [], items: 5, hasMoreItems: true, length: 0 };\r\n//     this.remove = this.remove.bind(this);\r\n//   }\r\n//   componentDidMount() {\r\n//     this.setState({ isLoading: true });\r\n//     //////////\r\n//     fetch('api/schema')\r\n//       .then(response => response.json())\r\n//       .then(schema => this.setState({ promotionCoulmn: schema, isLoading: false }));\r\n//     // fetch('api/promotions')\r\n//     //   .then(response => response.json())\r\n//     //   .then(data => this.setState({ promotions: data, isLoading: false }));\r\n//   }\r\n//   // async getScroll(ite) {\r\n//   //   fetch(`api/promotions/${ite}`)\r\n//   //     .then(response => response.json())\r\n//   //     .then(data =>{ this.setState({ x: data, isLoading: false })});\r\n//   // }\r\n\r\n//   async duplicate(id) {\r\n\r\n//   }\r\n//   async remove(id) {\r\n//     await fetch(`/api/promotion/${id}`, {\r\n//       method: 'DELETE',\r\n//       headers: {\r\n//         'Accept': 'application/json',\r\n//         'Content-Type': 'application/json'\r\n//       }\r\n//     }).then(() => {\r\n//       console.log(\"Remove Done!\");\r\n//       let updatedPromotions = [...this.state.promotions].filter(i => i._id !== id);\r\n//       this.setState({ promotions: updatedPromotions });\r\n//     });\r\n//   }\r\n//   // showItems(){\r\n//   //   const length = this.state.length;\r\n//   //   // const items = this.state.items;\r\n//   //   const hasMoreItems = this.state.hasMoreItems;\r\n//   //   // if (ite < 25) {\r\n//   //   // this.getScroll(ite);\r\n//   //   // debugger;\r\n//   //   console.log(\"length\", length);\r\n//   //   console.log(\"items\",  this.state.items);\r\n\r\n//   //   var items = [];\r\n\r\n//   //   fetch(`api/promotions/${length}`)\r\n//   //     .then(response => response.json())\r\n//   //     .then(data => this.setState({ promScroll: data, isLoading: false }))\r\n//   //   const { promScroll } = this.state;\r\n//   //   console.log(\"promScroll\", promScroll);\r\n//   //   for (const i = 0; i < this.state.items; i++) {\r\n//   //     items.push(\r\n//   //       <tr key=\"promScroll[i]._id\">{\r\n//   //                 Object.values(promScroll[i]).map(value =>\r\n//   //                   <td>{promScroll[i]._id != value ? value : ''}</td>\r\n//   //                 )}<td>\r\n//   //                   <ButtonGroup>\r\n//   //                     <Button size=\"sm\" color=\"primary\" tag={Link} to={\"/promotions/\" + promScroll[i]._id}>Edit</Button>\r\n//   //                     {/* <Button size=\"sm\" color=\"\" tag={Link} to={\"/promotions/\" + item._id}>Duplicate  </Button> */}\r\n//   //                     <Button size=\"sm\" color=\"\" onClick={() => this.duplicate(promScroll[i]._id)}>Duplicate</Button>\r\n//   //                     <Button size=\"sm\" color=\"danger\" onClick={() => this.remove(promScroll[i]._id)}>Delete</Button>\r\n//   //                   </ButtonGroup>\r\n//   //                 </td>\r\n//   //               </tr>\r\n//   //     );\r\n//   //     console.log(i);\r\n//   //   }\r\n//   //   return items;\r\n//   // }\r\n//   showItems() {\r\n//     const length = this.state.length;\r\n//       const ite = this.state.items;\r\n//       const hasMoreItems = this.state.hasMoreItems;\r\n  \r\n//       // if (ite < 25) {\r\n    \r\n//       // this.getScroll(ite);\r\n//     //  debugger;\r\n//     if (hasMoreItems) {\r\n//       fetch(`api/promotions/${ite}`)\r\n//         .then(response => { \r\n//           // debugger;\r\n//           return  response.json()})\r\n//         .then(data => this.setState({ promotions: data, isLoading: false }));\r\n\r\n//       // }\r\n//       const { promotions } = this.state;\r\n//       console.log(\"ppppp\", promotions);\r\n//       var items = [];\r\n//       promotions.map(item => (\r\n//         items.push(\r\n//           <tr key={item._id}>{\r\n//             Object.values(item).map(value =>\r\n//               <td>{item._id != value ? value : ''}</td>\r\n//             )}<td>\r\n//               <ButtonGroup>\r\n//                 <Button size=\"sm\" color=\"primary\" tag={Link} to={\"/promotions/\" + item._id}>Edit</Button>\r\n//                 {/* <Button size=\"sm\" color=\"\" tag={Link} to={\"/promotions/\" + item._id}>Duplicate  </Button> */}\r\n//                 <Button size=\"sm\" color=\"\" onClick={() => this.duplicate(item._id)}>Duplicate</Button>\r\n//                 <Button size=\"sm\" color=\"danger\" onClick={() => this.remove(item._id)}>Delete</Button>\r\n//               </ButtonGroup>\r\n//             </td>\r\n//           </tr>\r\n\r\n//         )\r\n//       ))\r\n//       return items;\r\n//     }\r\n//   }\r\n//   loadMore() {\r\n//     if (document.documentElement.scrollTop === document.documentElement.offsetHeight) {\r\n//       this.setState({ hasMoreItems: false});\r\n//     } else {\r\n     \r\n//         // debugger;\r\n//         if (this.state.items < 45) {\r\n//           this.setState({ items: this.state.items + 5 });\r\n//           console.log(\"stateitems\", this.state.items);\r\n//         }\r\n      \r\n//     }\r\n//   }\r\n//   render() {\r\n//     const { promotionCoulmn, promotions, isLoading } = this.state;\r\n//     console.log(\"promotions\", promotions);\r\n//     promotions.forEach(item =>\r\n//       console.log(Object.keys(item))\r\n//     )\r\n//     if (isLoading) {\r\n//       return <p>Loading...</p>;\r\n//     }\r\n//     console.log(\"promotionCoulmn\", promotionCoulmn);\r\n//     console.log(\"promotions\", promotions);\r\n\r\n//     const promotionList = promotions.map(item => (\r\n//       <tr key=\"item._id\">{\r\n//         Object.values(item).map(value =>\r\n//           <td>{item._id != value ? value : ''}</td>\r\n//         )}<td>\r\n//           <ButtonGroup>\r\n//             <Button size=\"sm\" color=\"primary\" tag={Link} to={\"/promotions/\" + item._id}>Edit</Button>\r\n//             {/* <Button size=\"sm\" color=\"\" tag={Link} to={\"/promotions/\" + item._id}>Duplicate  </Button> */}\r\n//             <Button size=\"sm\" color=\"\" onClick={() => this.duplicate(item._id)}>Duplicate</Button>\r\n//             <Button size=\"sm\" color=\"danger\" onClick={() => this.remove(item._id)}>Delete</Button>\r\n//           </ButtonGroup>\r\n//         </td></tr>\r\n//     ))\r\n//     // const promColumn=promotionColumns.map(column=>\r\n//     //   // <th>{column.fieldName}</th>\r\n//     //  console.log(\"field\",column)\r\n\r\n//     // )\r\n//     // const promColumn = promotionCoulmn.map(c => (\r\n//     //   <th>{Object.values(c)[1]}</th>\r\n//     //   // Object.values(c).map(cc =>\r\n//     //   //   <th>{cc.fieldName}</th>,\r\n//     //   //   // console.log(\"c\", cc),\r\n//     //   // )\r\n//     // ))\r\n\r\n\r\n\r\n//     const promotionColumns = [];\r\n//     const k = [];\r\n//     promotions.map(item => (\r\n//       k.push(Object.keys(item)),\r\n//       console.log(\"items\", k)\r\n//     )\r\n//     )\r\n//     k.map((item) => (\r\n//       console.log(item),\r\n//       item.map(a => {\r\n//         if (!promotionColumns.some(val => val === a)) {\r\n//           promotionColumns.push(a);\r\n//           console.log(\"em\", a);\r\n//         }\r\n//       })\r\n//     )\r\n//     )\r\n//     console.log(\"promotionC\", promotionColumns);\r\n//     const p = promotionColumns.map(coulmn =>\r\n//       <th>{'_id' != coulmn ? coulmn : ''}</th>\r\n//     )\r\n//     console.log(\"p\", promotionColumns);\r\n//     return (\r\n//       <div>\r\n//         <AppNavbar />\r\n//         <Container fluid>\r\n//           <div className=\"float-right\">\r\n//             <Button color=\"success\" tag={Link} to=\"/promotions/new\">Add Promotion</Button>\r\n//           </div>\r\n//           <h3>Promotion List</h3>\r\n//           <Table className=\"mt-4\">\r\n//             <thead>\r\n//               <div style={{ height: '500px', overflow: 'auto' }}>\r\n//                 <InfiniteScroll\r\n//                   loadMore={this.loadMore.bind(this)}\r\n//                   hasMore={this.state.hasMoreItems}\r\n//                   loader={<div className=\"loader\"> Loading... </div>}\r\n//                   useWindow={false}>\r\n//                   <tr>{p}</tr>\r\n//                   {this.showItems()}{\" \"}\r\n//                 </InfiniteScroll>{\" \"}\r\n//               </div>{\" \"}\r\n//             </thead>\r\n//             <tbody> </tbody>  </Table>\r\n//         </Container>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default PromotionList;\r\n\r\n////////////////////////////\r\n// import React, { Component } from 'react';\r\n// import { Button, ButtonGroup, Container, Table } from 'reactstrap';\r\n// import AppNavbar from './AppNavbar';\r\n// import { Link } from 'react-router-dom';\r\n\r\n// class PromotionList extends Component {\r\n\r\n//   constructor(props) {\r\n//     super(props);\r\n//     this.state = { promotions: [], isLoading: true, column: [] };\r\n//     this.remove = this.remove.bind(this);\r\n//   }\r\n//   componentDidMount() {\r\n//     this.setState({ isLoading: true });\r\n//     //////////\r\n\r\n//     fetch('api/schema')\r\n//       .then(response => response.json())\r\n//       .then(schema => this.setState({ promotionCoulmn: schema, isLoading: false }));\r\n//     fetch('api/promotions')\r\n//       .then(response => response.json())\r\n//       .then(data => this.setState({ promotions: data, isLoading: false }));\r\n//   }\r\n//   async duplicate(id) {\r\n\r\n//   }\r\n//   async remove(id) {\r\n//     await fetch(`/api/promotion/${id}`, {\r\n//       method: 'DELETE',\r\n//       headers: {\r\n//         'Accept': 'application/json',\r\n//         'Content-Type': 'application/json'\r\n//       }\r\n//     }).then(() => {\r\n//       console.log(\"Remove Done!\");\r\n//       let updatedPromotions = [...this.state.promotions].filter(i => i._id !== id);\r\n//       this.setState({ promotions: updatedPromotions });\r\n//     });\r\n//   }\r\n\r\n//   render() {\r\n//     const { promotionCoulmn, promotions, isLoading } = this.state;\r\n//     console.log(\"promotions\", promotions);\r\n//     promotions.forEach(item =>\r\n//       console.log(Object.keys(item))\r\n//     )\r\n//     if (isLoading) {\r\n//       return <p>Loading...</p>;\r\n//     }\r\n//     console.log(\"promotionCoulmn\", promotionCoulmn);\r\n//     console.log(\"promotions\", promotions);\r\n\r\n//     const promotionList = promotions.map(item => (\r\n//       <tr key=\"item._id\">{\r\n//         Object.values(item).map(value =>\r\n//           <td>{item._id != value ? value : ''}</td>\r\n//         )}<td>\r\n//           <ButtonGroup>\r\n//             <Button size=\"sm\" color=\"primary\" tag={Link} to={\"/promotions/\" + item._id}>Edit</Button>\r\n//             {/* <Button size=\"sm\" color=\"\" tag={Link} to={\"/promotions/\" + item._id}>Duplicate  </Button> */}\r\n//             <Button size=\"sm\" color=\"\" onClick={() => this.duplicate(item._id)}>Duplicate</Button>\r\n//             <Button size=\"sm\" color=\"danger\" onClick={() => this.remove(item._id)}>Delete</Button>\r\n//           </ButtonGroup>\r\n//         </td></tr>\r\n//     ))\r\n//     // const promColumn=promotionColumns.map(column=>\r\n//     //   // <th>{column.fieldName}</th>\r\n//     //  console.log(\"field\",column)\r\n\r\n//     // )\r\n//     // const promColumn = promotionCoulmn.map(c => (\r\n//     //   <th>{Object.values(c)[1]}</th>\r\n//     //   // Object.values(c).map(cc =>\r\n//     //   //   <th>{cc.fieldName}</th>,\r\n//     //   //   // console.log(\"c\", cc),\r\n//     //   // )\r\n//     // ))\r\n\r\n\r\n\r\n//     const promotionColumns = [];\r\n//     const k = [];\r\n//     promotions.map(item => (\r\n//       k.push(Object.keys(item)),\r\n//       console.log(\"items\", k)\r\n//     )\r\n//     )\r\n//     k.map((item) => (\r\n//       console.log(item),\r\n//       item.map(a => {\r\n//         if (!promotionColumns.some(val => val === a)) {\r\n//           promotionColumns.push(a);\r\n//           console.log(\"em\", a);\r\n//         }\r\n//       })\r\n//     )\r\n//     )\r\n//     console.log(\"promotionC\", promotionColumns);\r\n//     const p = promotionColumns.map(coulmn =>\r\n//       <th>{'_id' != coulmn ? coulmn : ''}</th>\r\n//     )\r\n//     console.log(\"p\", promotionColumns);\r\n//     return (\r\n//       <div>\r\n//         <AppNavbar />\r\n//         <Container fluid>\r\n//           <div className=\"float-right\">\r\n//             <Button color=\"success\" tag={Link} to=\"/promotions/new\">Add Promotion</Button>\r\n//           </div>\r\n//           <h3>Promotion List</h3>\r\n//           <Table className=\"mt-4\">\r\n//             <thead>\r\n//               <tr>{p}</tr>\r\n//               {/* <tr>{promColumn}</tr>  */}\r\n//             </thead>\r\n//             <tbody>\r\n//               {promotionList}\r\n//             </tbody>\r\n//           </Table>\r\n//         </Container>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default PromotionList;"]},"metadata":{},"sourceType":"module"}