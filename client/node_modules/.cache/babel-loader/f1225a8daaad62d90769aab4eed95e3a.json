{"ast":null,"code":"var _jsxFileName = \"C:\\\\project\\\\client\\\\src\\\\PromotionList.js\";\nimport React, { Component } from 'react';\nimport { Button, ButtonGroup, Container, Table } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\nimport { Link } from 'react-router-dom';\nimport InfiniteScroll from \"react-infinite-scroller\";\n\nclass PromotionList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      promotions: [],\n      isLoading: true,\n      column: [],\n      items: 10,\n      hasMoreItems: true\n    };\n    this.remove = this.remove.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      isLoading: true\n    }); //////////\n\n    fetch('api/schema').then(response => response.json()).then(schema => this.setState({\n      promotionCoulmn: schema,\n      isLoading: false\n    }));\n    fetch('api/promotions').then(response => response.json()).then(data => this.setState({\n      promotions: data,\n      isLoading: false\n    }));\n  }\n\n  async duplicate(id) {}\n\n  async remove(id) {\n    await fetch(`/api/promotion/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(() => {\n      console.log(\"Remove Done!\");\n      let updatedPromotions = [...this.state.promotions].filter(i => i._id !== id);\n      this.setState({\n        promotions: updatedPromotions\n      });\n    });\n  }\n\n  showItems() {\n    const {\n      promotions\n    } = this.state;\n    var items = [];\n\n    for (var i = 0; i < this.state.items; i++) {\n      const promotionList = promotions.map(item => items.push( /*#__PURE__*/React.createElement(Table, {\n        className: \"mt-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"thead\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 15\n        }\n      }, (k.push(Object.keys(item)), k.map(item => (console.log(item), item.map(a => {\n        if (!promotionColumns.some(val => val === a)) {\n          promotionColumns.push(a);\n        }\n      }))), promotionColumns.map(coulmn => /*#__PURE__*/React.createElement(\"th\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 19\n        }\n      }, '_id' != coulmn ? coulmn : ''))))), /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        key: \"item._id\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 15\n        }\n      }, Object.values(item).map(value => /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 19\n        }\n      }, item._id != value ? value : '')), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(ButtonGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        size: \"sm\",\n        color: \"primary\",\n        tag: Link,\n        to: \"/promotions/\" + item._id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }\n      }, \"Edit\"), /*#__PURE__*/React.createElement(Button, {\n        size: \"sm\",\n        color: \"\",\n        onClick: () => this.duplicate(item._id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }\n      }, \"Duplicate\"), /*#__PURE__*/React.createElement(Button, {\n        size: \"sm\",\n        color: \"danger\",\n        onClick: () => this.remove(item._id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }\n      }, \"Delete\")))))))); // items.push(<li key={i}> Item {i} </li>);\n      // console.log(i);\n    }\n\n    return items;\n  }\n\n  loadMore() {\n    if (document.documentElement.scrollTop === document.documentElement.offsetHeight) {\n      this.setState({\n        hasMoreItems: false\n      });\n    } else {\n      setTimeout(() => {\n        this.setState({\n          items: this.state.items + 20\n        });\n      }, 2000);\n    }\n  }\n\n  render() {\n    const {\n      promotionCoulmn,\n      promotions,\n      isLoading\n    } = this.state;\n    console.log(\"promotions\", promotions);\n    promotions.forEach(item => console.log(Object.keys(item)));\n\n    if (isLoading) {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 14\n        }\n      }, \"Loading...\");\n    }\n\n    console.log(\"promotionCoulmn\", promotionCoulmn);\n    console.log(\"promotions\", promotions);\n    const promotionList = promotions.map(item => /*#__PURE__*/React.createElement(\"tr\", {\n      key: \"item._id\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 7\n      }\n    }, Object.values(item).map(value => /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }\n    }, item._id != value ? value : '')), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(ButtonGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      size: \"sm\",\n      color: \"primary\",\n      tag: Link,\n      to: \"/promotions/\" + item._id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }\n    }, \"Edit\"), /*#__PURE__*/React.createElement(Button, {\n      size: \"sm\",\n      color: \"\",\n      onClick: () => this.duplicate(item._id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }\n    }, \"Duplicate\"), /*#__PURE__*/React.createElement(Button, {\n      size: \"sm\",\n      color: \"danger\",\n      onClick: () => this.remove(item._id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }, \"Delete\"))))); // const promColumn=promotionColumns.map(column=>\n    //   // <th>{column.fieldName}</th>\n    //  console.log(\"field\",column)\n    // )\n    // const promColumn = promotionCoulmn.map(c => (\n    //   <th>{Object.values(c)[1]}</th>\n    //   // Object.values(c).map(cc =>\n    //   //   <th>{cc.fieldName}</th>,\n    //   //   // console.log(\"c\", cc),\n    //   // )\n    // ))\n\n    const promotionColumns = [];\n    const k = [];\n    promotions.map(item => (k.push(Object.keys(item)), console.log(\"items\", k)));\n    k.map(item => (console.log(item), item.map(a => {\n      if (!promotionColumns.some(val => val === a)) {\n        promotionColumns.push(a);\n        console.log(\"em\", a);\n      }\n    })));\n    console.log(\"promotionC\", promotionColumns);\n    const p = promotionColumns.map(coulmn => /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 7\n      }\n    }, '_id' != coulmn ? coulmn : ''));\n    console.log(\"p\", promotionColumns);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(AppNavbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"float-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      color: \"success\",\n      tag: Link,\n      to: \"/promotions/new\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }\n    }, \"Add Promotion\")), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }\n    }, \"Promotion List\"), /*#__PURE__*/React.createElement(Table, {\n      className: \"mt-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 15\n      }\n    }, p)), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: '500px',\n        overflow: 'auto'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(InfiniteScroll, {\n      loadMore: this.loadMore.bind(this),\n      hasMore: this.state.hasMoreItems,\n      loader: /*#__PURE__*/React.createElement(\"div\", {\n        className: \"loader\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 27\n        }\n      }, \" Loading... \"),\n      useWindow: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }\n    }, this.showItems(), \" \"), \" \"), \" \"), \"  \")));\n  }\n\n}\n\nexport default PromotionList; ////////////////////////////\n// import React, { Component } from 'react';\n// import { Button, ButtonGroup, Container, Table } from 'reactstrap';\n// import AppNavbar from './AppNavbar';\n// import { Link } from 'react-router-dom';\n// class PromotionList extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = { promotions: [], isLoading: true, column: [] };\n//     this.remove = this.remove.bind(this);\n//   }\n//   componentDidMount() {\n//     this.setState({ isLoading: true });\n//     //////////\n//     fetch('api/schema')\n//       .then(response => response.json())\n//       .then(schema => this.setState({ promotionCoulmn: schema, isLoading: false }));\n//     fetch('api/promotions')\n//       .then(response => response.json())\n//       .then(data => this.setState({ promotions: data, isLoading: false }));\n//   }\n//   async duplicate(id) {\n//   }\n//   async remove(id) {\n//     await fetch(`/api/promotion/${id}`, {\n//       method: 'DELETE',\n//       headers: {\n//         'Accept': 'application/json',\n//         'Content-Type': 'application/json'\n//       }\n//     }).then(() => {\n//       console.log(\"Remove Done!\");\n//       let updatedPromotions = [...this.state.promotions].filter(i => i._id !== id);\n//       this.setState({ promotions: updatedPromotions });\n//     });\n//   }\n//   render() {\n//     const { promotionCoulmn, promotions, isLoading } = this.state;\n//     console.log(\"promotions\", promotions);\n//     promotions.forEach(item =>\n//       console.log(Object.keys(item))\n//     )\n//     if (isLoading) {\n//       return <p>Loading...</p>;\n//     }\n//     console.log(\"promotionCoulmn\", promotionCoulmn);\n//     console.log(\"promotions\", promotions);\n//     const promotionList = promotions.map(item => (\n//       <tr key=\"item._id\">{\n//         Object.values(item).map(value =>\n//           <td>{item._id != value ? value : ''}</td>\n//         )}<td>\n//           <ButtonGroup>\n//             <Button size=\"sm\" color=\"primary\" tag={Link} to={\"/promotions/\" + item._id}>Edit</Button>\n//             {/* <Button size=\"sm\" color=\"\" tag={Link} to={\"/promotions/\" + item._id}>Duplicate  </Button> */}\n//             <Button size=\"sm\" color=\"\" onClick={() => this.duplicate(item._id)}>Duplicate</Button>\n//             <Button size=\"sm\" color=\"danger\" onClick={() => this.remove(item._id)}>Delete</Button>\n//           </ButtonGroup>\n//         </td></tr>\n//     ))\n//     // const promColumn=promotionColumns.map(column=>\n//     //   // <th>{column.fieldName}</th>\n//     //  console.log(\"field\",column)\n//     // )\n//     // const promColumn = promotionCoulmn.map(c => (\n//     //   <th>{Object.values(c)[1]}</th>\n//     //   // Object.values(c).map(cc =>\n//     //   //   <th>{cc.fieldName}</th>,\n//     //   //   // console.log(\"c\", cc),\n//     //   // )\n//     // ))\n//     const promotionColumns = [];\n//     const k = [];\n//     promotions.map(item => (\n//       k.push(Object.keys(item)),\n//       console.log(\"items\", k)\n//     )\n//     )\n//     k.map((item) => (\n//       console.log(item),\n//       item.map(a => {\n//         if (!promotionColumns.some(val => val === a)) {\n//           promotionColumns.push(a);\n//           console.log(\"em\", a);\n//         }\n//       })\n//     )\n//     )\n//     console.log(\"promotionC\", promotionColumns);\n//     const p = promotionColumns.map(coulmn =>\n//       <th>{'_id' != coulmn ? coulmn : ''}</th>\n//     )\n//     console.log(\"p\", promotionColumns);\n//     return (\n//       <div>\n//         <AppNavbar />\n//         <Container fluid>\n//           <div className=\"float-right\">\n//             <Button color=\"success\" tag={Link} to=\"/promotions/new\">Add Promotion</Button>\n//           </div>\n//           <h3>Promotion List</h3>\n//           <Table className=\"mt-4\">\n//             <thead>\n//               <tr>{p}</tr>\n//               {/* <tr>{promColumn}</tr>  */}\n//             </thead>\n//             <tbody>\n//               {promotionList}\n//             </tbody>\n//           </Table>\n//         </Container>\n//       </div>\n//     );\n//   }\n// }\n// export default PromotionList;","map":{"version":3,"sources":["C:/project/client/src/PromotionList.js"],"names":["React","Component","Button","ButtonGroup","Container","Table","AppNavbar","Link","InfiniteScroll","PromotionList","constructor","props","state","promotions","isLoading","column","items","hasMoreItems","remove","bind","componentDidMount","setState","fetch","then","response","json","schema","promotionCoulmn","data","duplicate","id","method","headers","console","log","updatedPromotions","filter","i","_id","showItems","promotionList","map","item","push","k","Object","keys","a","promotionColumns","some","val","coulmn","values","value","loadMore","document","documentElement","scrollTop","offsetHeight","setTimeout","render","forEach","p","height","overflow"],"mappings":"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":["import React, { Component } from 'react';\r\nimport { Button, ButtonGroup, Container, Table } from 'reactstrap';\r\nimport AppNavbar from './AppNavbar';\r\nimport { Link } from 'react-router-dom';\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\n\r\nclass PromotionList extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { promotions: [], isLoading: true, column: [], items: 10, hasMoreItems: true };\r\n    this.remove = this.remove.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    this.setState({ isLoading: true });\r\n    //////////\r\n    fetch('api/schema')\r\n      .then(response => response.json())\r\n      .then(schema => this.setState({ promotionCoulmn: schema, isLoading: false }));\r\n    fetch('api/promotions')\r\n      .then(response => response.json())\r\n      .then(data => this.setState({ promotions: data, isLoading: false }));\r\n  }\r\n  async duplicate(id) {\r\n\r\n  }\r\n  async remove(id) {\r\n    await fetch(`/api/promotion/${id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }).then(() => {\r\n      console.log(\"Remove Done!\");\r\n      let updatedPromotions = [...this.state.promotions].filter(i => i._id !== id);\r\n      this.setState({ promotions: updatedPromotions });\r\n    });\r\n  }\r\n  showItems() {\r\n    const { promotions } = this.state;\r\n    var items = [];\r\n    for (var i = 0; i < this.state.items; i++) {\r\n    \r\n      const promotionList = promotions.map(item => (\r\n        items.push(\r\n          <Table className=\"mt-4\">\r\n            <thead>\r\n              <tr>{\r\n                k.push(Object.keys(item)),\r\n                k.map((item) => (\r\n                  console.log(item),\r\n                  item.map(a => {\r\n                    if (!promotionColumns.some(val => val === a)) {\r\n                      promotionColumns.push(a);\r\n                    }\r\n                  })\r\n                )),\r\n                promotionColumns.map(coulmn =>\r\n                  <th>{'_id' != coulmn ? coulmn : ''}</th>\r\n                )\r\n              }</tr>\r\n              {/* <tr>{p}</tr> */}\r\n              {/* <tr>{promColumn}</tr>  */}\r\n            </thead>\r\n\r\n            <tbody>\r\n              <tr key=\"item._id\">{\r\n                Object.values(item).map(value =>\r\n                  <td>{item._id != value ? value : ''}</td>\r\n                )}<td>\r\n                  <ButtonGroup>\r\n                    <Button size=\"sm\" color=\"primary\" tag={Link} to={\"/promotions/\" + item._id}>Edit</Button>\r\n                    {/* <Button size=\"sm\" color=\"\" tag={Link} to={\"/promotions/\" + item._id}>Duplicate  </Button> */}\r\n                    <Button size=\"sm\" color=\"\" onClick={() => this.duplicate(item._id)}>Duplicate</Button>\r\n                    <Button size=\"sm\" color=\"danger\" onClick={() => this.remove(item._id)}>Delete</Button>\r\n                  </ButtonGroup>\r\n                </td></tr>\r\n              {/* {promotionList} */}\r\n            </tbody>\r\n          </Table>)\r\n      ))\r\n      // items.push(<li key={i}> Item {i} </li>);\r\n      // console.log(i);\r\n    }\r\n    return items;\r\n  }\r\n  loadMore() {\r\n    if (document.documentElement.scrollTop === document.documentElement.offsetHeight) {\r\n      this.setState({ hasMoreItems: false });\r\n    } else {\r\n      setTimeout(() => {\r\n        this.setState({ items: this.state.items + 20 });\r\n      }, 2000);\r\n    }\r\n  }\r\n  render() {\r\n    const { promotionCoulmn, promotions, isLoading } = this.state;\r\n    console.log(\"promotions\", promotions);\r\n    promotions.forEach(item =>\r\n      console.log(Object.keys(item))\r\n    )\r\n    if (isLoading) {\r\n      return <p>Loading...</p>;\r\n    }\r\n    console.log(\"promotionCoulmn\", promotionCoulmn);\r\n    console.log(\"promotions\", promotions);\r\n\r\n    const promotionList = promotions.map(item => (\r\n      <tr key=\"item._id\">{\r\n        Object.values(item).map(value =>\r\n          <td>{item._id != value ? value : ''}</td>\r\n        )}<td>\r\n          <ButtonGroup>\r\n            <Button size=\"sm\" color=\"primary\" tag={Link} to={\"/promotions/\" + item._id}>Edit</Button>\r\n            {/* <Button size=\"sm\" color=\"\" tag={Link} to={\"/promotions/\" + item._id}>Duplicate  </Button> */}\r\n            <Button size=\"sm\" color=\"\" onClick={() => this.duplicate(item._id)}>Duplicate</Button>\r\n            <Button size=\"sm\" color=\"danger\" onClick={() => this.remove(item._id)}>Delete</Button>\r\n          </ButtonGroup>\r\n        </td></tr>\r\n    ))\r\n    // const promColumn=promotionColumns.map(column=>\r\n    //   // <th>{column.fieldName}</th>\r\n    //  console.log(\"field\",column)\r\n\r\n    // )\r\n    // const promColumn = promotionCoulmn.map(c => (\r\n    //   <th>{Object.values(c)[1]}</th>\r\n    //   // Object.values(c).map(cc =>\r\n    //   //   <th>{cc.fieldName}</th>,\r\n    //   //   // console.log(\"c\", cc),\r\n    //   // )\r\n    // ))\r\n\r\n\r\n\r\n    const promotionColumns = [];\r\n    const k = [];\r\n    promotions.map(item => (\r\n      k.push(Object.keys(item)),\r\n      console.log(\"items\", k)\r\n    )\r\n    )\r\n    k.map((item) => (\r\n      console.log(item),\r\n      item.map(a => {\r\n        if (!promotionColumns.some(val => val === a)) {\r\n          promotionColumns.push(a);\r\n          console.log(\"em\", a);\r\n        }\r\n      })\r\n    )\r\n    )\r\n    console.log(\"promotionC\", promotionColumns);\r\n    const p = promotionColumns.map(coulmn =>\r\n      <th>{'_id' != coulmn ? coulmn : ''}</th>\r\n    )\r\n    console.log(\"p\", promotionColumns);\r\n    return (\r\n      <div>\r\n        <AppNavbar />\r\n        <Container fluid>\r\n          <div className=\"float-right\">\r\n            <Button color=\"success\" tag={Link} to=\"/promotions/new\">Add Promotion</Button>\r\n          </div>\r\n          <h3>Promotion List</h3>\r\n          <Table className=\"mt-4\">\r\n            <thead>\r\n              <tr>{p}</tr>\r\n            </thead>\r\n            <tbody>\r\n              <div style={{ height: '500px', overflow: 'auto' }}>\r\n                <InfiniteScroll\r\n                  loadMore={this.loadMore.bind(this)}\r\n                  hasMore={this.state.hasMoreItems}\r\n                  loader={<div className=\"loader\"> Loading... </div>}\r\n                  useWindow={false}>\r\n                  {this.showItems()}{\" \"}\r\n                </InfiniteScroll>{\" \"}\r\n              </div>{\" \"}\r\n            </tbody>  </Table>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PromotionList;\r\n\r\n////////////////////////////\r\n// import React, { Component } from 'react';\r\n// import { Button, ButtonGroup, Container, Table } from 'reactstrap';\r\n// import AppNavbar from './AppNavbar';\r\n// import { Link } from 'react-router-dom';\r\n\r\n// class PromotionList extends Component {\r\n\r\n//   constructor(props) {\r\n//     super(props);\r\n//     this.state = { promotions: [], isLoading: true, column: [] };\r\n//     this.remove = this.remove.bind(this);\r\n//   }\r\n//   componentDidMount() {\r\n//     this.setState({ isLoading: true });\r\n//     //////////\r\n\r\n//     fetch('api/schema')\r\n//       .then(response => response.json())\r\n//       .then(schema => this.setState({ promotionCoulmn: schema, isLoading: false }));\r\n//     fetch('api/promotions')\r\n//       .then(response => response.json())\r\n//       .then(data => this.setState({ promotions: data, isLoading: false }));\r\n//   }\r\n//   async duplicate(id) {\r\n\r\n//   }\r\n//   async remove(id) {\r\n//     await fetch(`/api/promotion/${id}`, {\r\n//       method: 'DELETE',\r\n//       headers: {\r\n//         'Accept': 'application/json',\r\n//         'Content-Type': 'application/json'\r\n//       }\r\n//     }).then(() => {\r\n//       console.log(\"Remove Done!\");\r\n//       let updatedPromotions = [...this.state.promotions].filter(i => i._id !== id);\r\n//       this.setState({ promotions: updatedPromotions });\r\n//     });\r\n//   }\r\n\r\n//   render() {\r\n//     const { promotionCoulmn, promotions, isLoading } = this.state;\r\n//     console.log(\"promotions\", promotions);\r\n//     promotions.forEach(item =>\r\n//       console.log(Object.keys(item))\r\n//     )\r\n//     if (isLoading) {\r\n//       return <p>Loading...</p>;\r\n//     }\r\n//     console.log(\"promotionCoulmn\", promotionCoulmn);\r\n//     console.log(\"promotions\", promotions);\r\n\r\n//     const promotionList = promotions.map(item => (\r\n//       <tr key=\"item._id\">{\r\n//         Object.values(item).map(value =>\r\n//           <td>{item._id != value ? value : ''}</td>\r\n//         )}<td>\r\n//           <ButtonGroup>\r\n//             <Button size=\"sm\" color=\"primary\" tag={Link} to={\"/promotions/\" + item._id}>Edit</Button>\r\n//             {/* <Button size=\"sm\" color=\"\" tag={Link} to={\"/promotions/\" + item._id}>Duplicate  </Button> */}\r\n//             <Button size=\"sm\" color=\"\" onClick={() => this.duplicate(item._id)}>Duplicate</Button>\r\n//             <Button size=\"sm\" color=\"danger\" onClick={() => this.remove(item._id)}>Delete</Button>\r\n//           </ButtonGroup>\r\n//         </td></tr>\r\n//     ))\r\n//     // const promColumn=promotionColumns.map(column=>\r\n//     //   // <th>{column.fieldName}</th>\r\n//     //  console.log(\"field\",column)\r\n\r\n//     // )\r\n//     // const promColumn = promotionCoulmn.map(c => (\r\n//     //   <th>{Object.values(c)[1]}</th>\r\n//     //   // Object.values(c).map(cc =>\r\n//     //   //   <th>{cc.fieldName}</th>,\r\n//     //   //   // console.log(\"c\", cc),\r\n//     //   // )\r\n//     // ))\r\n\r\n\r\n\r\n//     const promotionColumns = [];\r\n//     const k = [];\r\n//     promotions.map(item => (\r\n//       k.push(Object.keys(item)),\r\n//       console.log(\"items\", k)\r\n//     )\r\n//     )\r\n//     k.map((item) => (\r\n//       console.log(item),\r\n//       item.map(a => {\r\n//         if (!promotionColumns.some(val => val === a)) {\r\n//           promotionColumns.push(a);\r\n//           console.log(\"em\", a);\r\n//         }\r\n//       })\r\n//     )\r\n//     )\r\n//     console.log(\"promotionC\", promotionColumns);\r\n//     const p = promotionColumns.map(coulmn =>\r\n//       <th>{'_id' != coulmn ? coulmn : ''}</th>\r\n//     )\r\n//     console.log(\"p\", promotionColumns);\r\n//     return (\r\n//       <div>\r\n//         <AppNavbar />\r\n//         <Container fluid>\r\n//           <div className=\"float-right\">\r\n//             <Button color=\"success\" tag={Link} to=\"/promotions/new\">Add Promotion</Button>\r\n//           </div>\r\n//           <h3>Promotion List</h3>\r\n//           <Table className=\"mt-4\">\r\n//             <thead>\r\n//               <tr>{p}</tr>\r\n//               {/* <tr>{promColumn}</tr>  */}\r\n//             </thead>\r\n//             <tbody>\r\n//               {promotionList}\r\n//             </tbody>\r\n//           </Table>\r\n//         </Container>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default PromotionList;"]},"metadata":{},"sourceType":"module"}