{"ast":null,"code":"var _jsxFileName = \"C:\\\\project\\\\client\\\\src\\\\PromotionList.js\";\nimport React, { Component } from 'react';\nimport { Button, ButtonGroup, Container, Table } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\nimport { Link } from 'react-router-dom';\nimport InfiniteScroll from \"react-infinite-scroller\";\n\nclass PromotionList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      promotions: [],\n      isLoading: true,\n      column: []\n    };\n    this.remove = this.remove.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      isLoading: true\n    }); //////////\n\n    fetch('api/schema').then(response => response.json()).then(schema => this.setState({\n      promotionCoulmn: schema,\n      isLoading: false\n    }));\n    fetch('api/promotions').then(response => response.json()).then(data => this.setState({\n      promotions: data,\n      isLoading: false\n    }));\n  }\n\n  async duplicate(id) {}\n\n  async remove(id) {\n    await fetch(`/api/promotion/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(() => {\n      console.log(\"Remove Done!\");\n      let updatedPromotions = [...this.state.promotions].filter(i => i._id !== id);\n      this.setState({\n        promotions: updatedPromotions\n      });\n    });\n  }\n\n  render() {\n    const {\n      promotionCoulmn,\n      promotions,\n      isLoading\n    } = this.state;\n    console.log(\"promotions\", promotions);\n    promotions.forEach(item => console.log(Object.keys(item)));\n\n    if (isLoading) {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 14\n        }\n      }, \"Loading...\");\n    }\n\n    console.log(\"promotionCoulmn\", promotionCoulmn);\n    console.log(\"promotions\", promotions);\n    const promotionList = promotions.map(item => /*#__PURE__*/React.createElement(\"tr\", {\n      key: \"item._id\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }\n    }, Object.values(item).map(value => /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    }, item._id != value ? value : '')), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(ButtonGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      size: \"sm\",\n      color: \"primary\",\n      tag: Link,\n      to: \"/promotions/\" + item._id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    }, \"Edit\"), /*#__PURE__*/React.createElement(Button, {\n      size: \"sm\",\n      color: \"\",\n      onClick: () => this.duplicate(item._id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    }, \"Duplicate\"), /*#__PURE__*/React.createElement(Button, {\n      size: \"sm\",\n      color: \"danger\",\n      onClick: () => this.remove(item._id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }\n    }, \"Delete\"))))); // const promColumn=promotionColumns.map(column=>\n    //   // <th>{column.fieldName}</th>\n    //  console.log(\"field\",column)\n    // )\n    // const promColumn = promotionCoulmn.map(c => (\n    //   <th>{Object.values(c)[1]}</th>\n    //   // Object.values(c).map(cc =>\n    //   //   <th>{cc.fieldName}</th>,\n    //   //   // console.log(\"c\", cc),\n    //   // )\n    // ))\n\n    const promotionColumns = [];\n    const k = [];\n    promotions.map(item => (k.push(Object.keys(item)), console.log(\"items\", k)));\n    k.map(item => (console.log(item), item.map(a => {\n      if (!promotionColumns.some(val => val === a)) {\n        promotionColumns.push(a);\n        console.log(\"em\", a);\n      }\n    })));\n    console.log(\"promotionC\", promotionColumns);\n    const p = promotionColumns.map(coulmn => /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }\n    }, '_id' != coulmn ? coulmn : ''));\n    console.log(\"p\", promotionColumns);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(AppNavbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"float-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      color: \"success\",\n      tag: Link,\n      to: \"/promotions/new\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    }, \"Add Promotion\")), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    }, \"Promotion List\"), /*#__PURE__*/React.createElement(InfiniteScroll, {\n      loadMore: this.loadMore.bind(this),\n      hasMore: this.state.hasMoreItems,\n      loader: /*#__PURE__*/React.createElement(\"div\", {\n        className: \"loader\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }\n      }, \" Loading... \"),\n      useWindow: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }\n    }, this.showItems(), \" \", /*#__PURE__*/React.createElement(Table, {\n      className: \"mt-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 15\n      }\n    }, p)), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }\n    }, promotionList))), \" \"));\n  }\n\n}\n\nexport default PromotionList; ////////////////////////////\n// import React, { Component } from 'react';\n// import { Button, ButtonGroup, Container, Table } from 'reactstrap';\n// import AppNavbar from './AppNavbar';\n// import { Link } from 'react-router-dom';\n// class PromotionList extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = { promotions: [], isLoading: true, column: [] };\n//     this.remove = this.remove.bind(this);\n//   }\n//   componentDidMount() {\n//     this.setState({ isLoading: true });\n//     //////////\n//     fetch('api/schema')\n//       .then(response => response.json())\n//       .then(schema => this.setState({ promotionCoulmn: schema, isLoading: false }));\n//     fetch('api/promotions')\n//       .then(response => response.json())\n//       .then(data => this.setState({ promotions: data, isLoading: false }));\n//   }\n//   async duplicate(id) {\n//   }\n//   async remove(id) {\n//     await fetch(`/api/promotion/${id}`, {\n//       method: 'DELETE',\n//       headers: {\n//         'Accept': 'application/json',\n//         'Content-Type': 'application/json'\n//       }\n//     }).then(() => {\n//       console.log(\"Remove Done!\");\n//       let updatedPromotions = [...this.state.promotions].filter(i => i._id !== id);\n//       this.setState({ promotions: updatedPromotions });\n//     });\n//   }\n//   render() {\n//     const { promotionCoulmn, promotions, isLoading } = this.state;\n//     console.log(\"promotions\", promotions);\n//     promotions.forEach(item =>\n//       console.log(Object.keys(item))\n//     )\n//     if (isLoading) {\n//       return <p>Loading...</p>;\n//     }\n//     console.log(\"promotionCoulmn\", promotionCoulmn);\n//     console.log(\"promotions\", promotions);\n//     const promotionList = promotions.map(item => (\n//       <tr key=\"item._id\">{\n//         Object.values(item).map(value =>\n//           <td>{item._id != value ? value : ''}</td>\n//         )}<td>\n//           <ButtonGroup>\n//             <Button size=\"sm\" color=\"primary\" tag={Link} to={\"/promotions/\" + item._id}>Edit</Button>\n//             {/* <Button size=\"sm\" color=\"\" tag={Link} to={\"/promotions/\" + item._id}>Duplicate  </Button> */}\n//             <Button size=\"sm\" color=\"\" onClick={() => this.duplicate(item._id)}>Duplicate</Button>\n//             <Button size=\"sm\" color=\"danger\" onClick={() => this.remove(item._id)}>Delete</Button>\n//           </ButtonGroup>\n//         </td></tr>\n//     ))\n//     // const promColumn=promotionColumns.map(column=>\n//     //   // <th>{column.fieldName}</th>\n//     //  console.log(\"field\",column)\n//     // )\n//     // const promColumn = promotionCoulmn.map(c => (\n//     //   <th>{Object.values(c)[1]}</th>\n//     //   // Object.values(c).map(cc =>\n//     //   //   <th>{cc.fieldName}</th>,\n//     //   //   // console.log(\"c\", cc),\n//     //   // )\n//     // ))\n//     const promotionColumns = [];\n//     const k = [];\n//     promotions.map(item => (\n//       k.push(Object.keys(item)),\n//       console.log(\"items\", k)\n//     )\n//     )\n//     k.map((item) => (\n//       console.log(item),\n//       item.map(a => {\n//         if (!promotionColumns.some(val => val === a)) {\n//           promotionColumns.push(a);\n//           console.log(\"em\", a);\n//         }\n//       })\n//     )\n//     )\n//     console.log(\"promotionC\", promotionColumns);\n//     const p = promotionColumns.map(coulmn =>\n//       <th>{'_id' != coulmn ? coulmn : ''}</th>\n//     )\n//     console.log(\"p\", promotionColumns);\n//     return (\n//       <div>\n//         <AppNavbar />\n//         <Container fluid>\n//           <div className=\"float-right\">\n//             <Button color=\"success\" tag={Link} to=\"/promotions/new\">Add Promotion</Button>\n//           </div>\n//           <h3>Promotion List</h3>\n//           <Table className=\"mt-4\">\n//             <thead>\n//               <tr>{p}</tr>\n//               {/* <tr>{promColumn}</tr>  */}\n//             </thead>\n//             <tbody>\n//               {promotionList}\n//             </tbody>\n//           </Table>\n//         </Container>\n//       </div>\n//     );\n//   }\n// }\n// export default PromotionList;","map":{"version":3,"sources":["C:/project/client/src/PromotionList.js"],"names":["React","Component","Button","ButtonGroup","Container","Table","AppNavbar","Link","InfiniteScroll","PromotionList","constructor","props","state","promotions","isLoading","column","remove","bind","componentDidMount","setState","fetch","then","response","json","schema","promotionCoulmn","data","duplicate","id","method","headers","console","log","updatedPromotions","filter","i","_id","render","forEach","item","Object","keys","promotionList","map","values","value","promotionColumns","k","push","a","some","val","p","coulmn","loadMore","hasMoreItems","showItems"],"mappings":"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":["import React, { Component } from 'react';\r\nimport { Button, ButtonGroup, Container, Table } from 'reactstrap';\r\nimport AppNavbar from './AppNavbar';\r\nimport { Link } from 'react-router-dom';\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\n\r\nclass PromotionList extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { promotions: [], isLoading: true, column: [] };\r\n    this.remove = this.remove.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    this.setState({ isLoading: true });\r\n    //////////\r\n    fetch('api/schema')\r\n      .then(response => response.json())\r\n      .then(schema => this.setState({ promotionCoulmn: schema, isLoading: false }));\r\n    fetch('api/promotions')\r\n      .then(response => response.json())\r\n      .then(data => this.setState({ promotions: data, isLoading: false }));\r\n  }\r\n  async duplicate(id) {\r\n\r\n  }\r\n  async remove(id) {\r\n    await fetch(`/api/promotion/${id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }).then(() => {\r\n      console.log(\"Remove Done!\");\r\n      let updatedPromotions = [...this.state.promotions].filter(i => i._id !== id);\r\n      this.setState({ promotions: updatedPromotions });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { promotionCoulmn, promotions, isLoading } = this.state;\r\n    console.log(\"promotions\", promotions);\r\n    promotions.forEach(item =>\r\n      console.log(Object.keys(item))\r\n    )\r\n    if (isLoading) {\r\n      return <p>Loading...</p>;\r\n    }\r\n    console.log(\"promotionCoulmn\", promotionCoulmn);\r\n    console.log(\"promotions\", promotions);\r\n\r\n    const promotionList = promotions.map(item => (\r\n      <tr key=\"item._id\">{\r\n        Object.values(item).map(value =>\r\n          <td>{item._id != value ? value : ''}</td>\r\n        )}<td>\r\n          <ButtonGroup>\r\n            <Button size=\"sm\" color=\"primary\" tag={Link} to={\"/promotions/\" + item._id}>Edit</Button>\r\n            {/* <Button size=\"sm\" color=\"\" tag={Link} to={\"/promotions/\" + item._id}>Duplicate  </Button> */}\r\n            <Button size=\"sm\" color=\"\" onClick={() => this.duplicate(item._id)}>Duplicate</Button>\r\n            <Button size=\"sm\" color=\"danger\" onClick={() => this.remove(item._id)}>Delete</Button>\r\n          </ButtonGroup>\r\n        </td></tr>\r\n    ))\r\n    // const promColumn=promotionColumns.map(column=>\r\n    //   // <th>{column.fieldName}</th>\r\n    //  console.log(\"field\",column)\r\n\r\n    // )\r\n    // const promColumn = promotionCoulmn.map(c => (\r\n    //   <th>{Object.values(c)[1]}</th>\r\n    //   // Object.values(c).map(cc =>\r\n    //   //   <th>{cc.fieldName}</th>,\r\n    //   //   // console.log(\"c\", cc),\r\n    //   // )\r\n    // ))\r\n\r\n\r\n\r\n    const promotionColumns = [];\r\n    const k = [];\r\n    promotions.map(item => (\r\n      k.push(Object.keys(item)),\r\n      console.log(\"items\", k)\r\n    )\r\n    )\r\n    k.map((item) => (\r\n      console.log(item),\r\n      item.map(a => {\r\n        if (!promotionColumns.some(val => val === a)) {\r\n          promotionColumns.push(a);\r\n          console.log(\"em\", a);\r\n        }\r\n      })\r\n    )\r\n    )\r\n    console.log(\"promotionC\", promotionColumns);\r\n    const p = promotionColumns.map(coulmn =>\r\n      <th>{'_id' != coulmn ? coulmn : ''}</th>\r\n    )\r\n    console.log(\"p\", promotionColumns);\r\n    return (\r\n      <div>\r\n        <AppNavbar />\r\n        <Container fluid>\r\n          <div className=\"float-right\">\r\n            <Button color=\"success\" tag={Link} to=\"/promotions/new\">Add Promotion</Button>\r\n          </div>\r\n          <h3>Promotion List</h3>\r\n          <InfiniteScroll\r\n            loadMore={this.loadMore.bind(this)}\r\n            hasMore={this.state.hasMoreItems}\r\n            loader={<div className=\"loader\"> Loading... </div>}\r\n            useWindow={false}>\r\n            {this.showItems()}{\" \"}\r\n            <Table className=\"mt-4\">\r\n            <thead>\r\n              <tr>{p}</tr>\r\n              {/* <tr>{promColumn}</tr>  */}\r\n            </thead>\r\n            <tbody>\r\n              {promotionList}\r\n            </tbody>\r\n          </Table>\r\n          </InfiniteScroll>{\" \"}\r\n      \r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PromotionList;\r\n\r\n////////////////////////////\r\n// import React, { Component } from 'react';\r\n// import { Button, ButtonGroup, Container, Table } from 'reactstrap';\r\n// import AppNavbar from './AppNavbar';\r\n// import { Link } from 'react-router-dom';\r\n\r\n// class PromotionList extends Component {\r\n\r\n//   constructor(props) {\r\n//     super(props);\r\n//     this.state = { promotions: [], isLoading: true, column: [] };\r\n//     this.remove = this.remove.bind(this);\r\n//   }\r\n//   componentDidMount() {\r\n//     this.setState({ isLoading: true });\r\n//     //////////\r\n\r\n//     fetch('api/schema')\r\n//       .then(response => response.json())\r\n//       .then(schema => this.setState({ promotionCoulmn: schema, isLoading: false }));\r\n//     fetch('api/promotions')\r\n//       .then(response => response.json())\r\n//       .then(data => this.setState({ promotions: data, isLoading: false }));\r\n//   }\r\n//   async duplicate(id) {\r\n\r\n//   }\r\n//   async remove(id) {\r\n//     await fetch(`/api/promotion/${id}`, {\r\n//       method: 'DELETE',\r\n//       headers: {\r\n//         'Accept': 'application/json',\r\n//         'Content-Type': 'application/json'\r\n//       }\r\n//     }).then(() => {\r\n//       console.log(\"Remove Done!\");\r\n//       let updatedPromotions = [...this.state.promotions].filter(i => i._id !== id);\r\n//       this.setState({ promotions: updatedPromotions });\r\n//     });\r\n//   }\r\n\r\n//   render() {\r\n//     const { promotionCoulmn, promotions, isLoading } = this.state;\r\n//     console.log(\"promotions\", promotions);\r\n//     promotions.forEach(item =>\r\n//       console.log(Object.keys(item))\r\n//     )\r\n//     if (isLoading) {\r\n//       return <p>Loading...</p>;\r\n//     }\r\n//     console.log(\"promotionCoulmn\", promotionCoulmn);\r\n//     console.log(\"promotions\", promotions);\r\n\r\n//     const promotionList = promotions.map(item => (\r\n//       <tr key=\"item._id\">{\r\n//         Object.values(item).map(value =>\r\n//           <td>{item._id != value ? value : ''}</td>\r\n//         )}<td>\r\n//           <ButtonGroup>\r\n//             <Button size=\"sm\" color=\"primary\" tag={Link} to={\"/promotions/\" + item._id}>Edit</Button>\r\n//             {/* <Button size=\"sm\" color=\"\" tag={Link} to={\"/promotions/\" + item._id}>Duplicate  </Button> */}\r\n//             <Button size=\"sm\" color=\"\" onClick={() => this.duplicate(item._id)}>Duplicate</Button>\r\n//             <Button size=\"sm\" color=\"danger\" onClick={() => this.remove(item._id)}>Delete</Button>\r\n//           </ButtonGroup>\r\n//         </td></tr>\r\n//     ))\r\n//     // const promColumn=promotionColumns.map(column=>\r\n//     //   // <th>{column.fieldName}</th>\r\n//     //  console.log(\"field\",column)\r\n\r\n//     // )\r\n//     // const promColumn = promotionCoulmn.map(c => (\r\n//     //   <th>{Object.values(c)[1]}</th>\r\n//     //   // Object.values(c).map(cc =>\r\n//     //   //   <th>{cc.fieldName}</th>,\r\n//     //   //   // console.log(\"c\", cc),\r\n//     //   // )\r\n//     // ))\r\n\r\n\r\n\r\n//     const promotionColumns = [];\r\n//     const k = [];\r\n//     promotions.map(item => (\r\n//       k.push(Object.keys(item)),\r\n//       console.log(\"items\", k)\r\n//     )\r\n//     )\r\n//     k.map((item) => (\r\n//       console.log(item),\r\n//       item.map(a => {\r\n//         if (!promotionColumns.some(val => val === a)) {\r\n//           promotionColumns.push(a);\r\n//           console.log(\"em\", a);\r\n//         }\r\n//       })\r\n//     )\r\n//     )\r\n//     console.log(\"promotionC\", promotionColumns);\r\n//     const p = promotionColumns.map(coulmn =>\r\n//       <th>{'_id' != coulmn ? coulmn : ''}</th>\r\n//     )\r\n//     console.log(\"p\", promotionColumns);\r\n//     return (\r\n//       <div>\r\n//         <AppNavbar />\r\n//         <Container fluid>\r\n//           <div className=\"float-right\">\r\n//             <Button color=\"success\" tag={Link} to=\"/promotions/new\">Add Promotion</Button>\r\n//           </div>\r\n//           <h3>Promotion List</h3>\r\n//           <Table className=\"mt-4\">\r\n//             <thead>\r\n//               <tr>{p}</tr>\r\n//               {/* <tr>{promColumn}</tr>  */}\r\n//             </thead>\r\n//             <tbody>\r\n//               {promotionList}\r\n//             </tbody>\r\n//           </Table>\r\n//         </Container>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default PromotionList;"]},"metadata":{},"sourceType":"module"}